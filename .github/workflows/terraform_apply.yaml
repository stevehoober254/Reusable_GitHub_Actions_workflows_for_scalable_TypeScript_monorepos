# This workflow automates the `terraform apply` process
# to provision AWS infrastructure for the monorepo.

name: "Terraform Apply EKS"

on:
  workflow_dispatch: # manual trigger for safety
    inputs:
      terraform_path:
        description: "Path to terraform directory (default: terraform/)"
        required: false
        default: "terraform/"
        type: string

permissions:
  id-token: write # required for OIDC with AWS
  contents: read # required for checkout

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials from GitHub Secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        id: init
        run: |
          cd ${{ inputs.terraform_path || 'terraform/' }}
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.terraform_path || 'terraform/' }}
          terraform plan -no-color -out=tfplan
          
      # This is the step to handle "already exists" errors
      - name: Import existing resources
        # You can use a conditional if you only need to run this for a single time
        # if: always()
        run: |
          terraform import aws_ecr_repository.api_repo my-eks-cluster-api
          terraform import aws_ecr_repository.nextjs_repo my-eks-cluster-nextjs
          terraform import 'module.eks.aws_cloudwatch_log_group.this[0]' /aws/eks/my-eks-cluster/cluster

      - name: Terraform Apply
        run: |
          cd ${{ inputs.terraform_path || 'terraform/' }}
          terraform apply -auto-approve tfplan
